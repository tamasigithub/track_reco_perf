
#include <iostream>
#include "TROOT.h"
#include "TFile.h"
#include "TProfile.h"
#include "TCanvas.h"
#include "TTree.h"
#include "TPostScript.h"
#include "TCut.h"
#include "TMath.h"
#include "TChain.h"
#include "TH1.h"
#include "TLegend.h"
#include <fstream>
#include <string>
#include <math.h>

const char* out_path = "./plots";
const char* in_path  = "./root_files";

//int write_to_pdf(const char* input_file_name = "control_ggF1.0_PU0_EC106opt_3.root",const char* output_file_name = "control_ggF1.0_PU0_EC106opt_3")
int write_to_pdf(const char* input_file_name = "control_ggF1.0_PU1k_EC67sel_3.root",const char* output_file_name = "control_ggF1.0_PU1k_EC67sel_3")
{

	char out_file_open[1023];
        sprintf(out_file_open,"%s/%s.pdf(",out_path,output_file_name);
        char out_file_[1023];
        sprintf(out_file_,"%s/%s.pdf",out_path,output_file_name);
        char out_file_close[1023];
        sprintf(out_file_close,"%s/%s.pdf)",out_path,output_file_name);

	char in_file[1023];
	sprintf(in_file, "%s/%s",in_path,input_file_name);
	TFile *f = TFile::Open(in_file);

	/*TF1 * k_l = (TF1*)f->Get("kappa_l");
	TF1 * k_m = (TF1*)f->Get("kappa_m");
	TF1 * k_t = (TF1*)f->Get("kappa_t");*/
	/*TF1 * dphi2_l = (TF1*)f->Get("fdphi2_l");
	TF1 * dphi2_m = (TF1*)f->Get("fdphi2_m");
	TF1 * dphi2_t = (TF1*)f->Get("fdphi2_t");
	TF1 * dz2_l = (TF1*)f->Get("fdz2_l");
	TF1 * dz2_m = (TF1*)f->Get("fdz2_m");
	TF1 * dz2_t = (TF1*)f->Get("fdz2_t");
*/
	TH2F* H1  = (TH2F*)f->Get("h1"); 
        TH2F* H2  = (TH2F*)f->Get("h2");
        TH2F* H3  = (TH2F*)f->Get("h3");
        TH2F* H4  = (TH2F*)f->Get("h4");
        TH2F* H5  = (TH2F*)f->Get("h5");
        TH2F* H5a = (TH2F*)f->Get("h5a");
        TH2F* H6  = (TH2F*)f->Get("h6");
        TH2F* H7  = (TH2F*)f->Get("h7");
        TH2F* H8  = (TH2F*)f->Get("h8");
        TH2F* H9  = (TH2F*)f->Get("h9");
        TH2F* H10 = (TH2F*)f->Get("h10");
        TH2F* H11 = (TH2F*)f->Get("h11");
        TH2F* H12 = (TH2F*)f->Get("h12");
        TH2F* H13 = (TH2F*)f->Get("h13");
        TH2F* H14 = (TH2F*)f->Get("h14");
        TH2F* H14a= (TH2F*)f->Get("h14a");
        TH2F* H15 = (TH2F*)f->Get("h15");
        TH2F* H16 = (TH2F*)f->Get("h16");
        TH2F* H17 = (TH2F*)f->Get("h17");
        TH2F* H17a= (TH2F*)f->Get("h17a");
        TH2F* H18 = (TH2F*)f->Get("h18");
        TH2F* H19 = (TH2F*)f->Get("h19");
        TH2F* H20 = (TH2F*)f->Get("h20");
        TH2F* H21 = (TH2F*)f->Get("h21");
        TH2F* H22 = (TH2F*)f->Get("h22");
        TH2F* H23 = (TH2F*)f->Get("h23");
        TH2F* H24 = (TH2F*)f->Get("h24");
        TH2F* H25 = (TH2F*)f->Get("h25");
        TH2F* H25a= (TH2F*)f->Get("h25a");
        TH2F* H26 = (TH2F*)f->Get("h26");
        TH1F* H27 = (TH1F*)f->Get("h27");
        TH1F* H28 = (TH1F*)f->Get("h28");
        TH1F* H28a= (TH1F*)f->Get("h28a");
        TH1F* H29 = (TH1F*)f->Get("h29");
        TH2F* H30 = (TH2F*)f->Get("h30");
        TH2F* H31 = (TH2F*)f->Get("h31");
        TH2F* H32 = (TH2F*)f->Get("h32");
        TH2F* H33 = (TH2F*)f->Get("h33");
        TH2F* H34 = (TH2F*)f->Get("h34");
        TH2F* H35 = (TH2F*)f->Get("h35");
        TH2F* H36 = (TH2F*)f->Get("h36");
        TH2F* H37 = (TH2F*)f->Get("h37");
        /*TH2F* H38 = (TH2F*)f->Get("h38");
        TH2F* H39 = (TH2F*)f->Get("h39");
        TH2F* H40 = (TH2F*)f->Get("h40");
        TH2F* H41 = (TH2F*)f->Get("h41");
        */            
        TH2F* tH22 = (TH2F*)f->Get("th22");
        TH2F* tH23 = (TH2F*)f->Get("th23");
        TH2F* tH24 = (TH2F*)f->Get("th24");
        TH2F* tH25 = (TH2F*)f->Get("th25");
        TH2F* tH25a= (TH2F*)f->Get("th25a");
        TH2F* tH26 = (TH2F*)f->Get("th26");
        TH1F* tH27 = (TH1F*)f->Get("th27");
        TH1F* tH28 = (TH1F*)f->Get("th28");
        TH1F* tH28a= (TH1F*)f->Get("th28a");
        TH1F* tH29 = (TH1F*)f->Get("th29");

        TH2F* tH36 = (TH2F*)f->Get("th36");
        TH2F* tH37 = (TH2F*)f->Get("th37");
        TH2F* tH38 = (TH2F*)f->Get("th38");
        TH2F* tH39 = (TH2F*)f->Get("th39");
        TH2F* tH40 = (TH2F*)f->Get("th40");
        TH2F* tH41 = (TH2F*)f->Get("th41");

	TH2F* H42 = (TH2F*)f->Get("h42");
        TH2F* H43 = (TH2F*)f->Get("h43");
        TH2F* H44 = (TH2F*)f->Get("h44");
        TH2F* H45 = (TH2F*)f->Get("h45");
        TH2F* H46 = (TH2F*)f->Get("h46");
        TH2F* H47 = (TH2F*)f->Get("h47");
        TH2F* H48 = (TH2F*)f->Get("h48");
        TH2F* H49 = (TH2F*)f->Get("h49");
        TH2F* H50 = (TH2F*)f->Get("h50");
        TH2F* H51 = (TH2F*)f->Get("h51");
        TH2F* H52 = (TH2F*)f->Get("h52");
        TH2F* H53 = (TH2F*)f->Get("h53");
        TH2F* H54 = (TH2F*)f->Get("h54");
        TH2F* H55 = (TH2F*)f->Get("h55");
        TH2F* H56 = (TH2F*)f->Get("h56");
        TH2F* H57 = (TH2F*)f->Get("h57");
        TH2F* H58 = (TH2F*)f->Get("h58");
        TH2F* H59 = (TH2F*)f->Get("h59");
        TH2F* H60 = (TH2F*)f->Get("h60");
        TH2F* H61 = (TH2F*)f->Get("h61");
        TH2F* H62 = (TH2F*)f->Get("h62");
	
	//! dca -> e,mu,pi for fakes,truth,rec tracks and for before and after kappa cut
	TH1F* H63 = (TH1F*)f->Get("h63");
	//TH1F* H64 = (TH1F*)f->Get("h64");
	//TH1F* H65 = (TH1F*)f->Get("h65");
	TH1F* H66 = (TH1F*)f->Get("h66");
	TH1F* H67 = (TH1F*)f->Get("h67");
	TH1F* H68 = (TH1F*)f->Get("h68");
	TH1F* H69 = (TH1F*)f->Get("h69");
	TH1F* H70 = (TH1F*)f->Get("h70");
	TH1F* H71 = (TH1F*)f->Get("h71");
	TH1F* H72 = (TH1F*)f->Get("h72");
	//TH1F* H73 = (TH1F*)f->Get("h73");
	//TH1F* H74 = (TH1F*)f->Get("h74");
	TH1F* H75 = (TH1F*)f->Get("h75");
	TH1F* H76 = (TH1F*)f->Get("h76");
	TH1F* H77 = (TH1F*)f->Get("h77");
	TH1F* H78 = (TH1F*)f->Get("h78");
	TH1F* H79 = (TH1F*)f->Get("h79");
	TH1F* H80 = (TH1F*)f->Get("h80");
	//! dz2 -> e,mu,pi for fakes,truth,rec tracks and for before and after kappa cut
	TH1F* H81 = (TH1F*)f->Get("h81");
	//TH1F* H82 = (TH1F*)f->Get("h82");
	//TH1F* H83 = (TH1F*)f->Get("h83");
	TH1F* H84 = (TH1F*)f->Get("h84");
	TH1F* H85 = (TH1F*)f->Get("h85");
	TH1F* H86 = (TH1F*)f->Get("h86");
	TH1F* H87 = (TH1F*)f->Get("h87");
	TH1F* H88 = (TH1F*)f->Get("h88");
	TH1F* H89 = (TH1F*)f->Get("h89");
	TH1F* H90 = (TH1F*)f->Get("h90");
	//TH1F* H91 = (TH1F*)f->Get("h91");
	//TH1F* H92 = (TH1F*)f->Get("h92");
	TH1F* H93 = (TH1F*)f->Get("h93");
	TH1F* H94 = (TH1F*)f->Get("h94");
	TH1F* H95 = (TH1F*)f->Get("h95");
	TH1F* H96 = (TH1F*)f->Get("h96");
	TH1F* H97 = (TH1F*)f->Get("h97");
	TH1F* H98 = (TH1F*)f->Get("h98");
	//! dkappa -> e,mu,pi for fakes,truth,rec tracks and for before and after kappa cut
	TH1F* H99 = (TH1F*)f->Get("h99");
	//TH1F* H100= (TH1F*)f->Get("h100");
	//TH1F* H101= (TH1F*)f->Get("h101");
	TH1F* H102= (TH1F*)f->Get("h102");
	TH1F* H103= (TH1F*)f->Get("h103");
	TH1F* H104= (TH1F*)f->Get("h104");
	TH1F* H105= (TH1F*)f->Get("h105");
	TH1F* H106= (TH1F*)f->Get("h106");
	TH1F* H107= (TH1F*)f->Get("h107");
	TH1F* H108= (TH1F*)f->Get("h108");
	//TH1F* H109= (TH1F*)f->Get("h109");
	//TH1F* H110= (TH1F*)f->Get("h110");
	TH1F* H111= (TH1F*)f->Get("h111");
	TH1F* H112= (TH1F*)f->Get("h112");
	TH1F* H113= (TH1F*)f->Get("h113");
	TH1F* H114= (TH1F*)f->Get("h114");
	TH1F* H115= (TH1F*)f->Get("h115");
	TH1F* H116= (TH1F*)f->Get("h116");

	TH1F* H117= (TH1F*)f->Get("h117");
	TH1F* H118= (TH1F*)f->Get("h118");
	TH1F* H119= (TH1F*)f->Get("h119");
		                       
	TH2F* H120= (TH2F*)f->Get("h120");
	TH2F* H121= (TH2F*)f->Get("h121");
	TH2F* H122= (TH2F*)f->Get("h122");
	TH2F* H123= (TH2F*)f->Get("h123");
	TH2F* H124= (TH2F*)f->Get("h124");
	TH2F* H125= (TH2F*)f->Get("h125");
	TH2F* H126= (TH2F*)f->Get("h126");
	TH2F* H127= (TH2F*)f->Get("h127");
	TH2F* H128= (TH2F*)f->Get("h128");
	TH2F* H129= (TH2F*)f->Get("h129");
	TH2F* H130= (TH2F*)f->Get("h130");
	TH2F* H131= (TH2F*)f->Get("h131");
		                       
	TH1F* H132= (TH1F*)f->Get("h132");
	TH1F* H133= (TH1F*)f->Get("h133");
	TH1F* H134= (TH1F*)f->Get("h134");
	TH1F* H135= (TH1F*)f->Get("h135");
	TH1F* H136= (TH1F*)f->Get("h136");
	TH1F* H137= (TH1F*)f->Get("h137");
	TH1F* H138= (TH1F*)f->Get("h138");
	TH1F* H139= (TH1F*)f->Get("h139");
		                       
	TH2F* H140= (TH2F*)f->Get("h140");
	TH2F* H141= (TH2F*)f->Get("h141");
	TH2F* H142= (TH2F*)f->Get("h142");
	TH2F* H143= (TH2F*)f->Get("h143");
	TH2F* H144= (TH2F*)f->Get("h144");
	TH2F* H145= (TH2F*)f->Get("h145");
	TH2F* H146= (TH2F*)f->Get("h146");
	TH2F* H147= (TH2F*)f->Get("h147");

	TH1F* H_pur_vs_eta	= (TH1F*)f->Get("h_pur_vs_etaPU");
	TH1F* H_pur_vs_eta_l    = (TH1F*)f->Get("h_pur_vs_eta_l");
	TH1F* H_pur_vs_eta_m    = (TH1F*)f->Get("h_pur_vs_eta_m");
	TH1F* H_pur_vs_eta_t    = (TH1F*)f->Get("h_pur_vs_eta_t");
	TH1F* H_pur_vs_pt       = (TH1F*)f->Get("h_pur_vs_ptPU");
	TH1F* H_pur_vs_pt_l     = (TH1F*)f->Get("h_pur_vs_pt_l");
	TH1F* H_pur_vs_pt_m     = (TH1F*)f->Get("h_pur_vs_pt_m");
	TH1F* H_pur_vs_pt_t     = (TH1F*)f->Get("h_pur_vs_pt_t");
	
	std::cout<<"Writing to pdf ....... \n";

	Double_t x1= 0.7,y1= 0.7, x2 = 0.99, y2 = 0.99;
	Double_t yy1= 0.82;
	TCanvas *S = new TCanvas();
	//! page1
	//***
	// 1. truth pT vs phi13 (w/o phi13 cut)
	// 2. truth pT vs phi13 (w/ phi13 cut)
	// 3. rec and matched pT vs phi13
	// 4. rec and fake pT vs phi13
	S->Divide(2,2);
	gStyle->SetOptStat(0);
        S->SetGridx();
        S->SetGridy();
	S->cd(1);
	H1->Draw();
	TLegend *l1=new TLegend(x1,yy1,x2,y2,"");
	l1->SetBorderSize(0);
        l1->SetTextAlign(32);
        l1->SetTextSize(0.035);
	l1->AddEntry(H1,"truth, wide cut");
	l1->Draw();
	//S->Print(out_file_open, "pdf");
	S->cd(2);
        H2->Draw();
	TLegend *l2=new TLegend(x1,yy1,x2,y2,"");
	l2->SetBorderSize(0);
        l2->SetTextAlign(32);
        l2->SetTextSize(0.035);
	l2->AddEntry(H2,"truth, Phi_{13}<0.007");
	l2->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H4->Draw();
	TLegend *l3=new TLegend(x1,yy1,x2,y2,"");
	l3->SetBorderSize(0);
        l3->SetTextAlign(32);
        l3->SetTextSize(0.035);
	l3->AddEntry(H4,"rec, matched");
	l3->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H6->Draw();
	TLegend *l4=new TLegend(x1,yy1,x2,y2,"");
	l4->SetBorderSize(0);
        l4->SetTextAlign(32);
        l4->SetTextSize(0.035);
	l4->AddEntry(H6,"rec, fakes");
	l4->Draw();
	S->Update();
	S->Print(out_file_open, "pdf");
	
	//! page2
	//***
	// 1. rec pT vs truth pT : all particles
	// 2. rec pT vs truth pT : pions
	// 3. rec pT vs truth pT : electrons
	// 4. rec pT vs truth pT : muons
	S->cd(1);
        H7->Draw();
	TLegend *l5=new TLegend(x1,yy1,x2,y2,"rec, matched");
	l5->SetBorderSize(0);
        l5->SetTextAlign(32);
        l5->SetTextSize(0.035);
	l5->AddEntry(H7,"all, wide cut");
	l5->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H8->Draw();
	TLegend *l6=new TLegend(x1,yy1,x2,y2,"");
	l6->SetBorderSize(0);
        l6->SetTextAlign(32);
        l6->SetTextSize(0.035);
	l6->AddEntry(H8,"pions, wide cut");
	l6->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H9->Draw();
	TLegend *l7=new TLegend(x1,yy1,x2,y2,"");
	l7->SetBorderSize(0);
        l7->SetTextAlign(32);
        l7->SetTextSize(0.035);
	l7->AddEntry(H9,"electrons, wide cut");
	l7->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H10->Draw();
	TLegend *l8=new TLegend(x1,yy1,x2,y2,"");
	l8->SetBorderSize(0);
        l8->SetTextAlign(32);
        l8->SetTextSize(0.035);
	l8->AddEntry(H10,"muons, wide cut");
	l8->Draw();
	S->Print(out_file_, "pdf");
	
	//! page3
	// 1. eta3 - eta1 dist. for matched tracks
	// 2. rec pT vs eta3 - eta1 for matched tracks
	// 3. d_eta2 distribution for matched tracks
	// 4. d_eta2 distribution for fake tracks
	S->Clear();
	S->SetGridx();
	S->SetGridy();
	S->Divide(2,2);
	S->cd(1);
	H3->Draw();
	S->cd(2);
	H11->Draw();
	S->cd(3);
        TPad *p5 = (TPad*)(S->cd(3));
	p5->SetLogy();
	H5->Draw();
	S->cd(4);
        TPad *p5a = (TPad*)(S->cd(4));
	p5a->SetLogy();
	H5a->Draw();
	TLegend *l9=new TLegend(x1,yy1,x2,y2,"");
	l9->SetBorderSize(0);
        l9->SetTextAlign(32);
        l9->SetTextSize(0.035);
	l9->AddEntry(H5a,"fakes");
	l9->Draw();
	S->Print(out_file_, "pdf");
	
	//! page4
	// 1. rec z013 vs dphi2 : fakes
	// 2. rec z013 vs dphi2 : matched
	// 3. tru z0 vs dphi2
	// 4. dphi2 distibution : matched
        S->Clear();
	S->Divide(2,2);
	S->cd(1);
        H12->Draw();
	TLegend *l10=new TLegend(x1,yy1,x2,y2,"");
	l10->SetBorderSize(0);
        l10->SetTextAlign(32);
        l10->SetTextSize(0.035);
	l10->AddEntry(H12,"#splitline{fakes, phibarrel,}{ zbarrel, z0}");
	l10->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H13->Draw();
	TLegend *l11=new TLegend(x1,yy1,x2,y2,"");
	l11->SetBorderSize(0);
        l11->SetTextAlign(32);
        l11->SetTextSize(0.035);
	l11->AddEntry(H13,"#splitline{matched_rec,phibarrel,}{ zbarrel, z0}");
	l11->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H14->Draw();
	TLegend *l12=new TLegend(x1,yy1,x2,y2,"");
	l12->SetBorderSize(0);
        l12->SetTextAlign(32);
        l12->SetTextSize(0.035);
	l12->AddEntry(H14,"#splitline{truth,}{ z0}");
	l12->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
        TPad *p14a = (TPad*)(S->cd(4));
	p14a->SetLogy();
	H14a->Draw();
	TLegend *l12a=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l12a->SetBorderSize(0);
        l12a->SetTextAlign(32);
        l12a->SetTextSize(0.035);
	l12a->AddEntry(H14a,"#splitline{phibarrel,}{ zbarrel, z0}");
	l12a->Draw();
	S->Print(out_file_, "pdf");
	
	//! page5
	// 1. rec z013 vs dr2 :  fakes
	// 2. rec z013 vs dr2 :  matched
	// 3. truth z0 vs dr2
	// 4. dr2 distribution : matched
	S->cd(1);
        H15->Draw();
	TLegend *l13=new TLegend(x1,yy1,x2,y2,"");
	l13->SetBorderSize(0);
        l13->SetTextAlign(32);
        l13->SetTextSize(0.035);
	l13->AddEntry(H15,"#splitline{fakes,phibarrel,}{ zbarrel, z0}");
	l13->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H16->Draw();
	TLegend *l14=new TLegend(x1,yy1,x2,y2,"");
	l14->SetBorderSize(0);
        l14->SetTextAlign(32);
        l14->SetTextSize(0.035);
	l14->AddEntry(H16,"#splitline{matched_rec,phibarrel,}{ zbarrel, z0}");
	l14->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H17->Draw();
	TLegend *l15=new TLegend(x1,yy1,x2,y2,"");
	l15->SetBorderSize(0);
        l15->SetTextAlign(32);
        l15->SetTextSize(0.035);
	l15->AddEntry(H17,"#splitline{truth,}{ z0}");
	l15->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H17a->Draw();
	TLegend *l15a=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l15a->SetBorderSize(0);
        l15a->SetTextAlign(32);
        l15a->SetTextSize(0.035);
	l15a->AddEntry(H17a,"#splitline{phibarrel,}{ zbarrel, z0}");
	l15a->Draw();
	S->Print(out_file_, "pdf");
	
	//! page6
	// 1. dphi2 vs theta013 : fakes 
	// 2. dphi2 vs theta013 : matched
	// 3. dphi2 vs tru theta
	// 4. deta2 dist : fakes (red) and matched 
	S->cd(1);
        H18->Draw();
	TLegend *l16=new TLegend(x1,yy1,x2,y2,"fakes");
	l16->SetBorderSize(0);
        l16->SetTextAlign(32);
        l16->SetTextSize(0.035);
	l16->AddEntry(H18,"#splitline{phibarrel,minpt,}{ maxeta, zbarrel, z0}");
	l16->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H19->Draw();
	TLegend *l17=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l17->SetBorderSize(0);
        l17->SetTextAlign(32);
        l17->SetTextSize(0.035);
	l17->AddEntry(H19,"#splitline{phibarrel,minpt,}{ maxeta, zbarrel, z0}");
	l17->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H20->Draw();
	TLegend *l18=new TLegend(x1,yy1,x2,y2,"truth");
	l18->SetBorderSize(0);
        l18->SetTextAlign(32);
        l18->SetTextSize(0.035);
	l18->AddEntry(H20,"#splitline{minpt, maxeta, }{ z0}");
	l18->Draw();
        S->cd(4);
        TPad *p5_ = (TPad*)(S->cd(4));
	p5_->SetLogy();
	H5->Draw();
	H5a->SetLineColor(kRed);
	H5a->Draw("same");
	//S->SetLogy();
	TLegend *tl21b=new TLegend(x1,yy1,x2,y2,"wide cuts");
	tl21b->SetBorderSize(0);
        tl21b->SetTextAlign(32);
        tl21b->SetTextSize(0.035);
	tl21b->AddEntry(H5,"matched");
	tl21b->AddEntry(H5a,"fakes");
	tl21b->Draw();
	S->Print(out_file_, "pdf");
	
	//! page7
	// 1. dr2 vs theta013 : fakes 
	// 2. dr2 vs theta013 : matched
	// 3. dr2 vs tru theta 
        S->cd(1);
	H21->Draw();
	TLegend *l19=new TLegend(x1,yy1,x2,y2,"fakes");
	l19->SetBorderSize(0);
        l19->SetTextAlign(32);
        l19->SetTextSize(0.035);
	l19->AddEntry(H21,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0}");
	l19->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H22->Draw();
	TLegend *l20=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l20->SetBorderSize(0);
        l20->SetTextAlign(32);
        l20->SetTextSize(0.035);
	l20->AddEntry(H22,"#splitline{phibarrel,minpt,}{ maxeta, zbarrel, z0}");
	l20->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H23->Draw();
	TLegend *l21=new TLegend(x1,yy1,x2,y2,"truth");
	l21->SetBorderSize(0);
        l21->SetTextAlign(32);
        l21->SetTextSize(0.035);
	l21->AddEntry(H23,"#splitline{minpt, maxeta,}{ z0}");
	l21->Draw();
	S->Print(out_file_, "pdf");
	
	//! page8
	// 1. dphi2 vs sin(theta013) : fakes 
	// 2. dphi2 vs sin(theta013) : matched
	// 3. dphi2 vs tru sin(theta)
	S->Clear();
	S->Divide(2,2);
        S->cd(1);
	H24->Draw();
	/*dphi2_l->Draw("same");
        dphi2_m->Draw("same");
        dphi2_t->Draw("same");*/
	TLegend *l22=new TLegend(x1,yy1,x2,y2,"fakes");
	l22->SetBorderSize(0);
        l22->SetTextAlign(32);
        l22->SetTextSize(0.035);
	l22->AddEntry(H24,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0}");
	l22->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H25a->Draw();
	/*dphi2_l->Draw("same");
        dphi2_m->Draw("same");
        dphi2_t->Draw("same");*/
	TLegend *l23=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l23->SetBorderSize(0);
        l23->SetTextAlign(32);
        l23->SetTextSize(0.035);
	l23->AddEntry(H25a,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0, no e's}");
	l23->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H25->Draw();
	/*dphi2_l->Draw("same");
        dphi2_m->Draw("same");
        dphi2_t->Draw("same");*/
	TLegend *l24=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l24->SetBorderSize(0);
        l24->SetTextAlign(32);
        l24->SetTextSize(0.035);
	l24->AddEntry(H25,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0}");
	l24->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H26->Draw();
	/*dphi2_l->Draw("same");
	dphi2_m->Draw("same");
	dphi2_t->Draw("same");*/
	TLegend *l25=new TLegend(x1,yy1,x2,y2,"truth");
	l25->SetBorderSize(0);
        l25->SetTextAlign(32);
        l25->SetTextSize(0.035);
	l25->AddEntry(H26,"#splitline{minpt, maxeta,}{ z0}");
	l25->Draw();
	S->Print(out_file_, "pdf");

	//! page9
	// 1. rec theta013 dist with l1l3 pre-selec. cuts
	// 2. tru theta dist.
	S->Clear();
	S->Divide(1,2);
	//S->Divide(2,2);
	S->cd(1);
	tH22->Draw();
	TLegend *tl20=new TLegend(x1,yy1,x2,y2,"matched_rec");
	tl20->SetBorderSize(0);
        tl20->SetTextAlign(32);
        tl20->SetTextSize(0.035);
	tl20->AddEntry(tH22,"#splitline{phibarrel,minpt,}{ maxeta, zbarrel, z0}");
	tl20->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	tH23->Draw();
	TLegend *tl21=new TLegend(x1,yy1,x2,y2,"truth");
	tl21->SetBorderSize(0);
        tl21->SetTextAlign(32);
        tl21->SetTextSize(0.035);
	tl21->AddEntry(tH23,"#splitline{minpt, maxeta,}{ z0}");
	tl21->Draw();
	S->Print(out_file_, "pdf");

	//! page10
	// 1. radial_gapsize vs dkappa: truth cuts 
	// 2. pixel_width vs dkappa: truth cuts
	// 3. radial_gapsize vs dkappa: reco (loose pre-sel) cuts 
	// 4. pixel_width vs dkappa: reco (loose pre-sel) cuts
	S->Clear();
	S->Divide(2,2);
        S->cd(1);
	tH24->Draw();
	TLegend *tl22=new TLegend(x1,yy1,x2,y2,"truth_cuts");
	tl22->SetBorderSize(0);
        tl22->SetTextAlign(32);
        tl22->SetTextSize(0.035);
	tl22->AddEntry(tH24,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0}");
	tl22->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	tH25a->Draw();
	TLegend *tl23=new TLegend(x1,yy1,x2,y2,"matched_rec");
	tl23->SetBorderSize(0);
        tl23->SetTextAlign(32);
        tl23->SetTextSize(0.035);
	tl23->AddEntry(tH25a,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0, no e's}");
	tl23->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	tH25->Draw();
	TLegend *tl24=new TLegend(x1,yy1,x2,y2,"truth_cuts");
	tl24->SetBorderSize(0);
        tl24->SetTextAlign(32);
        tl24->SetTextSize(0.035);
	tl24->AddEntry(tH25,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0}");
	tl24->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	tH26->Draw();
	TLegend *tl25=new TLegend(x1,yy1,x2,y2,"matched_rec");
	tl25->SetBorderSize(0);
        tl25->SetTextAlign(32);
        tl25->SetTextSize(0.035);
	tl25->AddEntry(tH26,"#splitline{minpt, maxeta,}{ z0}");
	tl25->Draw();
	S->Print(out_file_, "pdf");
	
	//!page11
	// 1. dphi2 : matched rec loose pre-selection
	// 2. dphi2 : matched rec w/ kappa cut w/o dphi2, deta2 cuts
	// 3. deta2 : matched rec loose pre-selection
	// 4. deta2 : matched rec w/ kappa cut w/o dphi2, deta2 cuts
        S->cd(1);
	TPad *p_1 = (TPad*)(S->cd(1));
	p_1->SetLogy(); 
	H27->Draw();
	/*dz2_l->Draw("same");
        dz2_m->Draw("same");
        dz2_t->Draw("same");*/
	TLegend *l26=new TLegend(x1,yy1,x2,y2,"matched");
	l26->SetBorderSize(0);
        l26->SetTextAlign(32);
        l26->SetTextSize(0.035);
	l26->AddEntry(H27,"loose pre-sel");
	l26->Draw();
	//S->Print(out_file_, "pdf");
	S->cd(2);
	TPad *p_2 = (TPad*)(S->cd(2));
	p_2->SetLogy(); 
        H28a->Draw();
	/*dz2_l->Draw("same");
        dz2_m->Draw("same");
        dz2_t->Draw("same");*/
	TLegend *l27=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l27->SetBorderSize(0);
        l27->SetTextAlign(32);
        l27->SetTextSize(0.035);
	l27->AddEntry(H28a,"+ w/ kappa cut");
	l27->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	TPad *p_3 = (TPad*)(S->cd(3));
	p_3->SetLogy(); 
	H28->Draw();
	/*dz2_l->Draw("same");
        dz2_m->Draw("same");
        dz2_t->Draw("same");*/
	TLegend *l28=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l28->SetBorderSize(0);
        l28->SetTextAlign(32);
        l28->SetTextSize(0.035);
	l28->AddEntry(H28,"loose pre-sel");
	l28->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	TPad *p_4 = (TPad*)(S->cd(4));
	p_4->SetLogy(); 
	H29->Draw();
	/*dz2_l->Draw("same");
	dz2_m->Draw("same");
	dz2_t->Draw("same");*/
	TLegend *l29=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l29->SetBorderSize(0);
        l29->SetTextAlign(32);
        l29->SetTextSize(0.035);
	l29->AddEntry(H29,"+ w/ kappa cut");
	l29->Draw();
	S->Print(out_file_, "pdf");
	
	//!page12
	// 1. dphi2 : fakes rec loose pre-selection
	// 2. dphi2 : fakes rec w/ kappa cut w/o dphi2, deta2 cuts
	// 3. deta2 : fakes rec loose pre-selection
	// 4. deta2 : fakes rec w/ kappa cut w/o dphi2, deta2 cuts
        S->cd(1);
	tH27->Draw();
	TLegend *tl26=new TLegend(x1,yy1,x2,y2,"fakes");
	tl26->SetBorderSize(0);
        tl26->SetTextAlign(32);
        tl26->SetTextSize(0.035);
	tl26->AddEntry(tH27,"loose pre-sel");
	tl26->Draw();
	//S->Print(out_file_, "pdf");
	S->cd(2);
        tH28a->Draw();
	TLegend *tl27=new TLegend(x1,yy1,x2,y2,"fakes");
	tl27->SetBorderSize(0);
        tl27->SetTextAlign(32);
        tl27->SetTextSize(0.035);
	tl27->AddEntry(tH28a,"+ w/ kappa cut");
	tl27->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	tH28->Draw();
	TLegend *tl28=new TLegend(x1,yy1,x2,y2,"fakes");
	tl28->SetBorderSize(0);
        tl28->SetTextAlign(32);
        tl28->SetTextSize(0.035);
	tl28->AddEntry(tH28,"loose pre-sel");
	tl28->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	tH29->Draw();
	TLegend *tl29=new TLegend(x1,yy1,x2,y2,"fakes");
	tl29->SetBorderSize(0);
        tl29->SetTextAlign(32);
        tl29->SetTextSize(0.035);
	tl29->AddEntry(tH29,"+ w/ kappa cut");
	tl29->Draw();
	S->Print(out_file_, "pdf");

	p_1->SetLogy(0);
	p_2->SetLogy(0);
	p_3->SetLogy(0);
	p_4->SetLogy(0);
	//! page13
	// 1. kappa013 vs kappa_pull : all truth cuts 
	// 2. kappa013 vs kappa_pull : all w/0 dphi2, deta2
	// 3. kappa013 vs kappa_pull : all with dphi2, deta2
	// 4. kappa013 vs kappa_pull : fakes with dphi2, deta2
        S->cd(1); 
	H30->Draw();
	TLegend *l30=new TLegend(x1,yy1,x2,y2,"truth_cuts");
	l30->SetBorderSize(0);
        l30->SetTextAlign(32);
        l30->SetTextSize(0.035);
	l30->AddEntry(H30,"");
	l30->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H31->Draw();
	TLegend *l31=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l31->SetBorderSize(0);
        l31->SetTextAlign(32);
        l31->SetTextSize(0.035);
	l31->AddEntry(H31,"w/o d#phi_{2}, d#eta_{2}");
	l31->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H32->Draw();
	TLegend *l32=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l32->SetBorderSize(0);
        l32->SetTextAlign(32);
        l32->SetTextSize(0.035);
	l32->AddEntry(H32,"w/ d#phi_{2}, d#eta_{2}");
	l32->Draw();
        S->cd(4);
	H36->Draw();
	TLegend *l36=new TLegend(x1,yy1,x2,y2,"fakes");
	l36->SetBorderSize(0);
        l36->SetTextAlign(32);
        l36->SetTextSize(0.035);
	l36->AddEntry(H32,"w/ d#phi_{2}, d#eta_{2}");
	l36->Draw();
	S->Print(out_file_, "pdf");
	
	//! page14
	// 1. Eta013 vs Eta013 : all truth cuts 
	// 2. Eta013 vs Eta013 : all w/0 dphi2, deta2
	// 3. Eta013 vs Eta013 : all with dphi2, deta2
	S->Clear();
	S->Divide(2,2);
        S->cd(1);
	H33->Draw();
	TLegend *l33=new TLegend(x1,yy1,x2,y2,"truth_cuts");
	l33->SetBorderSize(0);
        l33->SetTextAlign(32);
        l33->SetTextSize(0.035);
	l33->AddEntry(H33,"");
	l33->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H34->Draw();
	TLegend *l34=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l34->SetBorderSize(0);
        l34->SetTextAlign(32);
        l34->SetTextSize(0.035);
	l34->AddEntry(H34,"w/o d#phi_{2}, d#eta_{2}");
	l34->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H35->Draw();
	TLegend *l35=new TLegend(x1,yy1,x2,y2,"truth");
	l35->SetBorderSize(0);
        l35->SetTextAlign(32);
        l35->SetTextSize(0.035);
	l35->AddEntry(H35,"w/ d#phi_{2}, d#eta_{2}");
	l35->Draw();
        S->cd(4);
	H37->Draw();
	TLegend *l37=new TLegend(x1,yy1,x2,y2,"fakes");
	l37->SetBorderSize(0);
        l37->SetTextAlign(32);
        l37->SetTextSize(0.035);
	l37->AddEntry(H35,"w/ d#phi_{2}, d#eta_{2}");
	l37->Draw();
	//S->Print(out_file_, "pdf");
        /*S->cd(4);
	H41->Draw();
	k_l->Draw("same");
	k_m->Draw("same");
	k_t->Draw("same");
	TLegend *l41=new TLegend(0.65,yy1,x2,y2,"truth");
	l41->SetBorderSize(0);
        l41->SetTextAlign(32);
        l41->SetTextSize(0.035);
	l41->AddEntry(H41,"#splitline{minpt, maxeta}{ z0}");
	l41->Draw();
	S->Print(out_file_, "pdf");
        S->cd(1);
	H36->Draw();
	TLegend *l36=new TLegend(0.65,yy1,x2,y2,"all matched_rec");
	l36->SetBorderSize(0);
        l36->SetTextAlign(32);
        l36->SetTextSize(0.035);
	l36->AddEntry(H36,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	l36->Draw();
	k_l->Draw("same");
        k_m->Draw("same");
        k_t->Draw("same");
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H37->Draw();
	k_l->Draw("same");
        k_m->Draw("same");
        k_t->Draw("same");
	TLegend *l37=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l37->SetBorderSize(0);
        l37->SetTextAlign(32);
        l37->SetTextSize(0.035);
	l37->AddEntry(H37,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	l37->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H38->Draw();
	k_l->Draw("same");
        k_m->Draw("same");
        k_t->Draw("same");
	TLegend *l38=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l38->SetBorderSize(0);
        l38->SetTextAlign(32);
        l38->SetTextSize(0.035);
	l38->AddEntry(H38,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	l38->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H39->Draw();
	k_l->Draw("same");
	k_m->Draw("same");
	k_t->Draw("same");
	TLegend *l39=new TLegend(0.65,yy1,x2,y2,"no e's matched_rec");
	l39->SetBorderSize(0);
        l39->SetTextAlign(32);
        l39->SetTextSize(0.035);
	l39->AddEntry(H39,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	l39->Draw();
	S->Print(out_file_, "pdf");
        S->Clear();
	H40->Draw();
	k_l->Draw("same");
	k_m->Draw("same");
	k_t->Draw("same");
	TLegend *l40=new TLegend(0.65,yy1,x2,y2,"muon's matched_rec");
	l40->SetBorderSize(0);
        l40->SetTextAlign(32);
        l40->SetTextSize(0.035);
	l40->AddEntry(H40,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	l40->Draw();*/
	S->Print(out_file_, "pdf");
	
	//! page15
	// 1. kappa013 vs dkappa :  truth
	// 2. kappa013 vs dkappa :  rec all
	// 3. kappa013 vs dkappa :  rec no electrons
	S->Clear();
	S->Divide(2,2);
        S->cd(1);
	tH36->Draw();
	TLegend *tl36=new TLegend(0.65,yy1,x2,y2,"truth no kap");
	tl36->SetBorderSize(0);
        tl36->SetTextAlign(32);
        tl36->SetTextSize(0.035);
	tl36->AddEntry(tH36,"#splitline{minpt, maxeta,}{ z0}");
	tl36->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	tH37->Draw();
	TLegend *tl37=new TLegend(0.65,yy1,x2,y2,"matched_rec no kap");
	tl37->SetBorderSize(0);
        tl37->SetTextAlign(32);
        tl37->SetTextSize(0.035);
	tl37->AddEntry(tH37,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	tl37->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	tH38->Draw();
	TLegend *tl38=new TLegend(0.65,yy1,x2,y2,"no kap, no e's");
	tl38->SetBorderSize(0);
        tl38->SetTextAlign(32);
        tl38->SetTextSize(0.035);
	tl38->AddEntry(tH38,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	tl38->Draw();
	S->Print(out_file_, "pdf");
	
	//! page16
	// 1. kappa013 vs dkappa :  rec loose
	// 2. kappa013 vs dkappa :  rec medium
	// 3. kappa013 vs dkappa :  rec tight
	// 4. kappa013 vs dkappa :  rec loose medium tight
        S->cd(1);
	tH39->Draw();
	TLegend *tl39=new TLegend(0.65,yy1,x2,y2,"kap_l");
	tl39->SetBorderSize(0);
        tl39->SetTextAlign(32);
        tl39->SetTextSize(0.035);
	tl39->AddEntry(tH39,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	tl39->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	tH40->Draw();
	TLegend *tl40=new TLegend(0.65,yy1,x2,y2,"kap_m");
	tl40->SetBorderSize(0);
        tl40->SetTextAlign(32);
        tl40->SetTextSize(0.035);
	tl40->AddEntry(tH40,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0, dphi2, dz2}");
	tl40->Draw();
	//S->Print(out_file_, "pdf");
	S->cd(3);
	tH41->Draw();
	TLegend *tl41=new TLegend(0.65,yy1,x2,y2,"kap_t");
	tl41->SetBorderSize(0);
        tl41->SetTextAlign(32);
        tl41->SetTextSize(0.035);
	tl41->AddEntry(tH41,"#splitline{minpt, maxeta}{ z0}");
	tl41->Draw();
	//S->Print(out_file_, "pdf");
	S->cd(4);
	tH37->Draw();
	tH39->Draw("same");
	tH40->Draw("same");
	tH41->Draw("same");
	TLegend *ttl41=new TLegend(0.75,yy1,x2,y2,"");
	ttl41->SetBorderSize(0);
        ttl41->SetTextAlign(32);
        ttl41->SetTextSize(0.035);
	ttl41->AddEntry(tH37,"no kap");
	ttl41->AddEntry(tH39,"kap_l");
	ttl41->AddEntry(tH40,"kap_m");
	ttl41->AddEntry(tH41,"kap_t");
	ttl41->Draw();

	S->Print(out_file_, "pdf");
	//! page17
        S->Clear();
	S->Divide(2,2);
        S->cd(1);
	H42->Draw();
	TLegend *l42=new TLegend(0.65,yy1,x2,y2,"fakes");
	l42->SetBorderSize(0);
        l42->SetTextAlign(32);
        l42->SetTextSize(0.035);
	l42->AddEntry(H42,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l42->Draw();
        S->cd(2);
	H43->Draw();
	TLegend *l43=new TLegend(x1,yy1,x2,y2,"matched_rec");
	l43->SetBorderSize(0);
        l43->SetTextAlign(32);
        l43->SetTextSize(0.035);
	l43->AddEntry(H43,"#splitline{phibarrel, minpt,}{ maxeta, zbarrel, z0}");
	l43->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H44->Draw();
	TLegend *l44=new TLegend(x1,yy1,x2,y2,"truth");
	l44->SetBorderSize(0);
        l44->SetTextAlign(32);
        l44->SetTextSize(0.035);
	l44->AddEntry(H44,"#splitline{minpt, maxeta}{ z0}");
	l44->Draw();
	S->Print(out_file_, "pdf");
	//! page18
	S->Clear();
	H45->Draw();
	TLegend *l45=new TLegend(0.65,yy1,x2,y2,"fakes");
	l45->SetBorderSize(0);
        l45->SetTextAlign(32);
        l45->SetTextSize(0.035);
	l45->AddEntry(H45,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l45->Draw();
	S->Print(out_file_, "pdf");
	//! page19
        S->Clear();
        S->Divide(2,2);
	S->cd(1);
	H46->Draw();
	TLegend *l46=new TLegend(0.65,yy1,x2,y2,"all matched_rec");
	l46->SetBorderSize(0);
        l46->SetTextAlign(32);
        l46->SetTextSize(0.035);
	l46->AddEntry(H46,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l46->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H47->Draw();
	TLegend *l47=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l47->SetBorderSize(0);
        l47->SetTextAlign(32);
        l47->SetTextSize(0.035);
	l47->AddEntry(H47,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l47->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H48->Draw();
	TLegend *l48=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l48->SetBorderSize(0);
        l48->SetTextAlign(32);
        l48->SetTextSize(0.035);
	l48->AddEntry(H48,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l48->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H49->Draw();
	TLegend *l49=new TLegend(0.65,yy1,x2,y2,"muon's matched_rec");
	l49->SetBorderSize(0);
        l49->SetTextAlign(32);
        l49->SetTextSize(0.035);
	l49->AddEntry(H49,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l49->Draw();
	S->Print(out_file_, "pdf");
	//! page20
	S->cd(1);
	H50->Draw();
	TLegend *l50=new TLegend(0.65,yy1,x2,y2,"all truth");
	l50->SetBorderSize(0);
        l50->SetTextAlign(32);
        l50->SetTextSize(0.035);
	l50->AddEntry(H50,"#splitline{minpt, maxeta,}{ z0}");
	l50->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H51->Draw();
	TLegend *l51=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l51->SetBorderSize(0);
        l51->SetTextAlign(32);
        l51->SetTextSize(0.035);
	l51->AddEntry(H51,"#splitline{minpt, maxeta,}{ z0}");
	l51->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H52->Draw();
	TLegend *l52=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l52->SetBorderSize(0);
        l52->SetTextAlign(32);
        l52->SetTextSize(0.035);
	l52->AddEntry(H52,"#splitline{minpt, maxeta,}{ z0}");
	l52->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H53->Draw();
	TLegend *l53=new TLegend(0.65,yy1,x2,y2,"muon's truth");
	l53->SetBorderSize(0);
        l53->SetTextAlign(32);
        l53->SetTextSize(0.035);
	l53->AddEntry(H53,"#splitline{minpt, maxeta,}{ z0}");
	l53->Draw();
	S->Print(out_file_, "pdf");
	//! page21
	S->Clear();
	H54->Draw();
	TLegend *l54=new TLegend(0.65,yy1,x2,y2,"fakes");
	l54->SetBorderSize(0);
        l54->SetTextAlign(32);
        l54->SetTextSize(0.035);
	l54->AddEntry(H54,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l54->Draw();
	S->Print(out_file_, "pdf");
	//! page22
        S->Clear();
        S->Divide(2,2);
	S->cd(1);
	H55->Draw();
	TLegend *l55=new TLegend(0.65,yy1,x2,y2,"all matched_rec");
	l55->SetBorderSize(0);
        l55->SetTextAlign(32);
        l55->SetTextSize(0.035);
	l55->AddEntry(H55,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l55->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H56->Draw();
	TLegend *l56=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l56->SetBorderSize(0);
        l56->SetTextAlign(32);
        l56->SetTextSize(0.035);
	l56->AddEntry(H56,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l56->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H57->Draw();
	TLegend *l57=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l57->SetBorderSize(0);
        l57->SetTextAlign(32);
        l57->SetTextSize(0.035);
	l57->AddEntry(H57,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l57->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H58->Draw();
	TLegend *l58=new TLegend(0.65,yy1,x2,y2,"muon's matched_rec");
	l58->SetBorderSize(0);
        l58->SetTextAlign(32);
        l58->SetTextSize(0.035);
	l58->AddEntry(H58,"#splitline{phibarrel, minpt, maxeta,}{ zbarrel, z0}");
	l58->Draw();
	S->Print(out_file_, "pdf");
	//! page23
	S->cd(1);
	H59->Draw();
	TLegend *l59=new TLegend(0.65,yy1,x2,y2,"all truth");
	l59->SetBorderSize(0);
        l59->SetTextAlign(32);
        l59->SetTextSize(0.035);
	l59->AddEntry(H59,"#splitline{minpt, maxeta,}{ z0}");
	l59->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H60->Draw();
	TLegend *l60=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l60->SetBorderSize(0);
        l60->SetTextAlign(32);
        l60->SetTextSize(0.035);
	l60->AddEntry(H60,"#splitline{minpt, maxeta,}{ z0}");
	l60->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H61->Draw();
	TLegend *l61=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l61->SetBorderSize(0);
        l61->SetTextAlign(32);
        l61->SetTextSize(0.035);
	l61->AddEntry(H61,"#splitline{minpt, maxeta,}{ z0}");
	l61->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H62->Draw();
	TLegend *l62=new TLegend(0.65,yy1,x2,y2,"muon's truth");
	l62->SetBorderSize(0);
        l62->SetTextAlign(32);
        l62->SetTextSize(0.035);
	l62->AddEntry(H62,"#splitline{minpt, maxeta,}{ z0}");
	l62->Draw();
	S->Print(out_file_, "pdf");
	//! page24
        S->Clear();
	S->Divide(1,2);
	S->cd(1);
	H63->Draw();
	TLegend *l63=new TLegend(0.65,yy1,x2,y2,"fakes");
	l63->SetBorderSize(0);
        l63->SetTextAlign(32);
        l63->SetTextSize(0.035);
	l63->AddEntry(H63,"w/o kappa cut");
	l63->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H72->Draw();
	TLegend *l64=new TLegend(0.65,yy1,x2,y2,"fakes");
	l64->SetBorderSize(0);
        l64->SetTextAlign(32);
        l64->SetTextSize(0.035);
	l64->AddEntry(H72,"with kappa cut");
	l64->Draw();
	S->Print(out_file_, "pdf");
	//! page25
        /*S->cd(3);
	H65->Draw();
	TLegend *l65=new TLegend(0.65,yy1,x2,y2,"muon fakes");
	l65->SetBorderSize(0);
        l65->SetTextAlign(32);
        l65->SetTextSize(0.035);
	l65->AddEntry(H65,"w/o kappa cut");
	l65->Draw();
	S->Print(out_file_, "pdf");*/
	S->Clear();
	S->Divide(2,2);
	S->cd(1);
	H66->Draw();
	TLegend *l66=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l66->SetBorderSize(0);
        l66->SetTextAlign(32);
        l66->SetTextSize(0.035);
	l66->AddEntry(H66,"w/o kappa cut");
	l66->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H67->Draw();
	TLegend *l67=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l67->SetBorderSize(0);
        l67->SetTextAlign(32);
        l67->SetTextSize(0.035);
	l67->AddEntry(H67,"w/o kappa cut");
	l67->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H68->Draw();
	TLegend *l68=new TLegend(0.65,yy1,x2,y2,"muon truth");
	l68->SetBorderSize(0);
        l68->SetTextAlign(32);
        l68->SetTextSize(0.035);
	l68->AddEntry(H68,"w/o kappa cut");
	l68->Draw();
	S->Print(out_file_, "pdf");
	//! page26
	S->cd(1);
	H69->Draw();
	TLegend *l69=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l69->SetBorderSize(0);
        l69->SetTextAlign(32);
        l69->SetTextSize(0.035);
	l69->AddEntry(H69,"w/o kappa cut");
	l69->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H70->Draw();
	TLegend *l70=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l70->SetBorderSize(0);
        l70->SetTextAlign(32);
        l70->SetTextSize(0.035);
	l70->AddEntry(H70,"w/o kappa cut");
	l70->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H71->Draw();
	TLegend *l71=new TLegend(0.65,yy1,x2,y2,"muon matched_rec");
	l71->SetBorderSize(0);
        l71->SetTextAlign(32);
        l71->SetTextSize(0.035);
	l71->AddEntry(H71,"w/o kappa cut");
	l71->Draw();
	S->Print(out_file_, "pdf");
	//! page27
	/*S->cd(1);
	H72->Draw();
	TLegend *l72=new TLegend(0.65,yy1,x2,y2,"pion fakes");
	l72->SetBorderSize(0);
        l72->SetTextAlign(32);
        l72->SetTextSize(0.035);
	l72->AddEntry(H72,"with kappa cut");
	l72->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H73->Draw();
	TLegend *l73=new TLegend(0.65,yy1,x2,y2,"electron fakes");
	l73->SetBorderSize(0);
        l73->SetTextAlign(32);
        l73->SetTextSize(0.035);
	l73->AddEntry(H73,"with kappa cut");
	l73->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H74->Draw();
	TLegend *l74=new TLegend(0.65,yy1,x2,y2,"muon fakes");
	l74->SetBorderSize(0);
        l74->SetTextAlign(32);
        l74->SetTextSize(0.035);
	l74->AddEntry(H74,"with kappa cut");
	l74->Draw();
	S->Print(out_file_, "pdf");*/
	S->cd(1);
	H75->Draw();
	TLegend *l75=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l75->SetBorderSize(0);
        l75->SetTextAlign(32);
        l75->SetTextSize(0.035);
	l75->AddEntry(H75,"with kappa cut");
	l75->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H76->Draw();
	TLegend *l76=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l76->SetBorderSize(0);
        l76->SetTextAlign(32);
        l76->SetTextSize(0.035);
	l76->AddEntry(H76,"with kappa cut");
	l76->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H77->Draw();
	TLegend *l77=new TLegend(0.65,yy1,x2,y2,"muon truth");
	l77->SetBorderSize(0);
        l77->SetTextAlign(32);
        l77->SetTextSize(0.035);
	l77->AddEntry(H77,"with kappa cut");
	l77->Draw();
	S->Print(out_file_, "pdf");
	//! page28
	S->cd(1);
	H78->Draw();
	TLegend *l78=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l78->SetBorderSize(0);
        l78->SetTextAlign(32);
        l78->SetTextSize(0.035);
	l78->AddEntry(H78,"with kappa cut");
	l78->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H79->Draw();
	TLegend *l79=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l79->SetBorderSize(0);
        l79->SetTextAlign(32);
        l79->SetTextSize(0.035);
	l79->AddEntry(H79,"with kappa cut");
	l79->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H80->Draw();
	TLegend *l80=new TLegend(0.65,yy1,x2,y2,"muon matched_rec");
	l80->SetBorderSize(0);
        l80->SetTextAlign(32);
        l80->SetTextSize(0.035);
	l80->AddEntry(H80,"with kappa cut");
	l80->Draw();
	S->Print(out_file_, "pdf");
	//! page29
	S->Clear();
	S->Divide(1,2);
	S->cd(1);
	H81->Draw();
	TLegend *l81=new TLegend(0.65,yy1,x2,y2,"fakes");
	l81->SetBorderSize(0);
        l81->SetTextAlign(32);
        l81->SetTextSize(0.035);
	l81->AddEntry(H81,"w/o kappa cut");
	l81->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H90->Draw();
	TLegend *l82=new TLegend(0.65,yy1,x2,y2,"fakes");
	l82->SetBorderSize(0);
        l82->SetTextAlign(32);
        l82->SetTextSize(0.035);
	l82->AddEntry(H90,"with kappa cut");
	l82->Draw();
	S->Print(out_file_, "pdf");
	//! page30
        /*S->cd(3);
	H83->Draw();
	TLegend *l83=new TLegend(0.65,yy1,x2,y2,"muon fakes");
	l83->SetBorderSize(0);
        l83->SetTextAlign(32);
        l83->SetTextSize(0.035);
	l83->AddEntry(H83,"w/o kappa cut");
	l83->Draw();
	S->Print(out_file_, "pdf");*/
	S->Clear();
	S->Divide(2,2);
	S->cd(1);
	H84->Draw();
	TLegend *l84=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l84->SetBorderSize(0);
        l84->SetTextAlign(32);
        l84->SetTextSize(0.035);
	l84->AddEntry(H84,"w/o kappa cut");
	l84->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H85->Draw();
	TLegend *l85=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l85->SetBorderSize(0);
        l85->SetTextAlign(32);
        l85->SetTextSize(0.035);
	l85->AddEntry(H85,"w/o kappa cut");
	l85->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H86->Draw();
	TLegend *l86=new TLegend(0.65,yy1,x2,y2,"muon truth");
	l86->SetBorderSize(0);
        l86->SetTextAlign(32);
        l86->SetTextSize(0.035);
	l86->AddEntry(H86,"w/o kappa cut");
	l86->Draw();
	S->Print(out_file_, "pdf");
	//! page31
	S->cd(1);
	H87->Draw();
	TLegend *l87=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l87->SetBorderSize(0);
        l87->SetTextAlign(32);
        l87->SetTextSize(0.035);
	l87->AddEntry(H87,"w/o kappa cut");
	l87->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H88->Draw();
	TLegend *l88=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l88->SetBorderSize(0);
        l88->SetTextAlign(32);
        l88->SetTextSize(0.035);
	l88->AddEntry(H88,"w/o kappa cut");
	l88->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H89->Draw();
	TLegend *l89=new TLegend(0.65,yy1,x2,y2,"muon matched_rec");
	l89->SetBorderSize(0);
        l89->SetTextAlign(32);
        l89->SetTextSize(0.035);
	l89->AddEntry(H89,"w/o kappa cut");
	l89->Draw();
	S->Print(out_file_, "pdf");
	//! page32
	/*S->cd(1);
	H90->Draw();
	TLegend *l90=new TLegend(0.65,yy1,x2,y2,"pion fakes");
	l90->SetBorderSize(0);
        l90->SetTextAlign(32);
        l90->SetTextSize(0.035);
	l90->AddEntry(H90,"with kappa cut");
	l90->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H91->Draw();
	TLegend *l91=new TLegend(0.65,yy1,x2,y2,"electron fakes");
	l91->SetBorderSize(0);
        l91->SetTextAlign(32);
        l91->SetTextSize(0.035);
	l91->AddEntry(H91,"with kappa cut");
	l91->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H92->Draw();
	TLegend *l92=new TLegend(0.65,yy1,x2,y2,"muon fakes");
	l92->SetBorderSize(0);
        l92->SetTextAlign(32);
        l92->SetTextSize(0.035);
	l92->AddEntry(H92,"with kappa cut");
	l92->Draw();
	S->Print(out_file_, "pdf");*/
	S->cd(1);
	H93->Draw();
	TLegend *l93=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l93->SetBorderSize(0);
        l93->SetTextAlign(32);
        l93->SetTextSize(0.035);
	l93->AddEntry(H93,"with kappa cut");
	l93->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H94->Draw();
	TLegend *l94=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l94->SetBorderSize(0);
        l94->SetTextAlign(32);
        l94->SetTextSize(0.035);
	l94->AddEntry(H94,"with kappa cut");
	l94->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H95->Draw();
	TLegend *l95=new TLegend(0.65,yy1,x2,y2,"muon truth");
	l95->SetBorderSize(0);
        l95->SetTextAlign(32);
        l95->SetTextSize(0.035);
	l95->AddEntry(H95,"with kappa cut");
	l95->Draw();
	S->Print(out_file_, "pdf");
	//! page33
	S->cd(1);
	H96->Draw();
	TLegend *l96=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l96->SetBorderSize(0);
        l96->SetTextAlign(32);
        l96->SetTextSize(0.035);
	l96->AddEntry(H96,"with kappa cut");
	l96->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H97->Draw();
	TLegend *l97=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l97->SetBorderSize(0);
        l97->SetTextAlign(32);
        l97->SetTextSize(0.035);
	l97->AddEntry(H97,"with kappa cut");
	l97->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H98->Draw();
	TLegend *l98=new TLegend(0.65,yy1,x2,y2,"muon matched_rec");
	l98->SetBorderSize(0);
        l98->SetTextAlign(32);
        l98->SetTextSize(0.035);
	l98->AddEntry(H98,"with kappa cut");
	l98->Draw();
	S->Print(out_file_, "pdf");
	//! page34
	S->Clear();
	S->Divide(1,2);
	S->cd(1);
	H99->Draw();
	TLegend *l99=new TLegend(0.65,yy1,x2,y2,"fakes");
	l99->SetBorderSize(0);
        l99->SetTextAlign(32);
        l99->SetTextSize(0.035);
	l99->AddEntry(H99,"w/o kappa cut");
	l99->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H108->Draw();
	TLegend *l100=new TLegend(0.65,yy1,x2,y2,"fakes");
	l100->SetBorderSize(0);
        l100->SetTextAlign(32);
        l100->SetTextSize(0.035);
	l100->AddEntry(H108,"with kappa cut");
	l100->Draw();
	S->Print(out_file_, "pdf");
	//! page35
        /*S->cd(3);
	H101->Draw();
	TLegend *l101=new TLegend(0.65,yy1,x2,y2,"muon fakes");
	l101->SetBorderSize(0);
        l101->SetTextAlign(32);
        l101->SetTextSize(0.035);
	l101->AddEntry(H101,"w/o kappa cut");
	l101->Draw();
	S->Print(out_file_, "pdf");*/
	S->Clear();
	S->Divide(2,2);
	S->cd(1);
	H102->Draw();
	TLegend *l102=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l102->SetBorderSize(0);
        l102->SetTextAlign(32);
        l102->SetTextSize(0.035);
	l102->AddEntry(H102,"w/o kappa cut");
	l102->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H103->Draw();
	TLegend *l103=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l103->SetBorderSize(0);
        l103->SetTextAlign(32);
        l103->SetTextSize(0.035);
	l103->AddEntry(H103,"w/o kappa cut");
	l103->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H104->Draw();
	TLegend *l104=new TLegend(0.65,yy1,x2,y2,"muon truth");
	l104->SetBorderSize(0);
        l104->SetTextAlign(32);
        l104->SetTextSize(0.035);
	l104->AddEntry(H104,"w/o kappa cut");
	l104->Draw();
	S->Print(out_file_, "pdf");
	//! page36
	S->cd(1);
	H105->Draw();
	TLegend *l105=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l105->SetBorderSize(0);
        l105->SetTextAlign(32);
        l105->SetTextSize(0.035);
	l105->AddEntry(H105,"w/o kappa cut");
	l105->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H106->Draw();
	TLegend *l106=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l106->SetBorderSize(0);
        l106->SetTextAlign(32);
        l106->SetTextSize(0.035);
	l106->AddEntry(H106,"w/o kappa cut");
	l106->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H107->Draw();
	TLegend *l107=new TLegend(0.65,yy1,x2,y2,"muon matched_rec");
	l107->SetBorderSize(0);
        l107->SetTextAlign(32);
        l107->SetTextSize(0.035);
	l107->AddEntry(H107,"w/o kappa cut");
	l107->Draw();
	S->Print(out_file_, "pdf");
	//! page37
	/*S->cd(1);
	H108->Draw();
	TLegend *l108=new TLegend(0.65,yy1,x2,y2,"pion fakes");
	l108->SetBorderSize(0);
        l108->SetTextAlign(32);
        l108->SetTextSize(0.035);
	l108->AddEntry(H108,"with kappa cut");
	l108->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H109->Draw();
	TLegend *l109=new TLegend(0.65,yy1,x2,y2,"electron fakes");
	l109->SetBorderSize(0);
        l109->SetTextAlign(32);
        l109->SetTextSize(0.035);
	l109->AddEntry(H109,"with kappa cut");
	l109->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H110->Draw();
	TLegend *l110=new TLegend(0.65,yy1,x2,y2,"muon fakes");
	l110->SetBorderSize(0);
        l110->SetTextAlign(32);
        l110->SetTextSize(0.035);
	l110->AddEntry(H110,"with kappa cut");
	l110->Draw();
	S->Print(out_file_, "pdf");*/
	S->cd(1);
	H111->Draw();
	TLegend *l111=new TLegend(0.65,yy1,x2,y2,"pion truth");
	l111->SetBorderSize(0);
        l111->SetTextAlign(32);
        l111->SetTextSize(0.035);
	l111->AddEntry(H111,"with kappa cut");
	l111->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H112->Draw();
	TLegend *l112=new TLegend(0.65,yy1,x2,y2,"electron truth");
	l112->SetBorderSize(0);
        l112->SetTextAlign(32);
        l112->SetTextSize(0.035);
	l112->AddEntry(H112,"with kappa cut");
	l112->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H113->Draw();
	TLegend *l113=new TLegend(0.65,yy1,x2,y2,"muon truth");
	l113->SetBorderSize(0);
        l113->SetTextAlign(32);
        l113->SetTextSize(0.035);
	l113->AddEntry(H113,"with kappa cut");
	l113->Draw();
	S->Print(out_file_, "pdf");
	//! page38
	S->cd(1);
	H114->Draw();
	TLegend *l114=new TLegend(0.65,yy1,x2,y2,"pion matched_rec");
	l114->SetBorderSize(0);
        l114->SetTextAlign(32);
        l114->SetTextSize(0.035);
	l114->AddEntry(H114,"with kappa cut");
	l114->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H115->Draw();
	TLegend *l115=new TLegend(0.65,yy1,x2,y2,"electron matched_rec");
	l115->SetBorderSize(0);
        l115->SetTextAlign(32);
        l115->SetTextSize(0.035);
	l115->AddEntry(H115,"with kappa cut");
	l115->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H116->Draw();
	TLegend *l116=new TLegend(0.65,yy1,x2,y2,"muon matched_rec");
	l116->SetBorderSize(0);
        l116->SetTextAlign(32);
        l116->SetTextSize(0.035);
	l116->AddEntry(H116,"with kappa cut");
	l116->Draw();
	S->Print(out_file_, "pdf");
	//! page39
	S->cd(1);
	H117->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H118->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H119->Draw();
	S->Print(out_file_, "pdf");
	//! page40
	S->cd(1);
	H120->Draw();
	TLegend *l120=new TLegend(0.65,yy1,x2,y2,"all");
	l120->SetBorderSize(0);
        l120->SetTextAlign(32);
        l120->SetTextSize(0.035);
	l120->AddEntry(H120,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	l120->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H121->Draw();
	TLegend *l121=new TLegend(0.65,yy1,x2,y2,"pion");
	l121->SetBorderSize(0);
        l121->SetTextAlign(32);
        l121->SetTextSize(0.035);
	l121->AddEntry(H121,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l121->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H122->Draw();
	TLegend *l122=new TLegend(0.65,yy1,x2,y2,"electron");
	l122->SetBorderSize(0);
        l122->SetTextAlign(32);
        l122->SetTextSize(0.035);
	l122->AddEntry(H122,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l122->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H123->Draw();
	TLegend *l123=new TLegend(0.65,yy1,x2,y2,"muon's");
	l123->SetBorderSize(0);
        l123->SetTextAlign(32);
        l123->SetTextSize(0.035);
	l123->AddEntry(H123,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	l123->Draw();
	S->Print(out_file_, "pdf");
	//! page41
	S->cd(1);
	H124->Draw();
	TLegend *l124=new TLegend(0.65,yy1,x2,y2,"all");
	l124->SetBorderSize(0);
        l124->SetTextAlign(32);
        l124->SetTextSize(0.035);
	l124->AddEntry(H124,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	l124->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H125->Draw();
	TLegend *l125=new TLegend(0.65,yy1,x2,y2,"pion");
	l125->SetBorderSize(0);
        l125->SetTextAlign(32);
        l125->SetTextSize(0.035);
	l125->AddEntry(H125,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l125->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H126->Draw();
	TLegend *l126=new TLegend(0.65,yy1,x2,y2,"electron");
	l126->SetBorderSize(0);
        l126->SetTextAlign(32);
        l126->SetTextSize(0.035);
	l126->AddEntry(H126,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l126->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H127->Draw();
	TLegend *l127=new TLegend(0.65,yy1,x2,y2,"muon's");
	l127->SetBorderSize(0);
        l127->SetTextAlign(32);
        l127->SetTextSize(0.035);
	l127->AddEntry(H127,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	l127->Draw();
	S->Print(out_file_, "pdf");
	//! page42
	S->cd(1);
	H128->Draw();
	TLegend *l128=new TLegend(0.65,yy1,x2,y2,"all");
	l128->SetBorderSize(0);
        l128->SetTextAlign(32);
        l128->SetTextSize(0.035);
	l128->AddEntry(H128,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	l128->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H129->Draw();
	TLegend *l129=new TLegend(0.65,yy1,x2,y2,"pion");
	l129->SetBorderSize(0);
        l129->SetTextAlign(32);
        l129->SetTextSize(0.035);
	l129->AddEntry(H129,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l129->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H130->Draw();
	TLegend *l130=new TLegend(0.65,yy1,x2,y2,"electron");
	l130->SetBorderSize(0);
        l130->SetTextAlign(32);
        l130->SetTextSize(0.035);
	l130->AddEntry(H130,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l130->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H131->Draw();
	TLegend *l131=new TLegend(0.65,yy1,x2,y2,"muon's");
	l131->SetBorderSize(0);
        l131->SetTextAlign(32);
        l131->SetTextSize(0.035);
	l131->AddEntry(H131,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	l131->Draw();
	S->Print(out_file_, "pdf");
	//! page43
	S->cd(1);
	H132->Draw();
	TLegend *l132=new TLegend(0.65,yy1,x2,y2,"all");
	l132->SetBorderSize(0);
        l132->SetTextAlign(32);
        l132->SetTextSize(0.035);
	l132->AddEntry(H132,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	l132->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H133->Draw();
	TLegend *l133=new TLegend(0.65,yy1,x2,y2,"pion");
	l133->SetBorderSize(0);
        l133->SetTextAlign(32);
        l133->SetTextSize(0.035);
	l133->AddEntry(H133,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l133->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H134->Draw();
	TLegend *l134=new TLegend(0.65,yy1,x2,y2,"electron");
	l134->SetBorderSize(0);
        l134->SetTextAlign(32);
        l134->SetTextSize(0.035);
	l134->AddEntry(H134,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l134->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H135->Draw();
	TLegend *l135=new TLegend(0.65,yy1,x2,y2,"muon's");
	l135->SetBorderSize(0);
        l135->SetTextAlign(32);
        l135->SetTextSize(0.035);
	l135->AddEntry(H135,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	l135->Draw();
	S->Print(out_file_, "pdf");
	//! page44
	TPad *p1 = (TPad*)(S->cd(1));
	p1->SetLogy();
	H132->Draw();
	TLegend *la132=new TLegend(0.65,yy1,x2,y2,"all");
	la132->SetBorderSize(0);
        la132->SetTextAlign(32);
        la132->SetTextSize(0.035);
	la132->AddEntry(H132,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	la132->Draw();
	//S->Print(out_file_, "pdf");
        TPad *p2 = (TPad*)(S->cd(2));
	p2->SetLogy();
	H133->Draw();
	TLegend *la133=new TLegend(0.65,yy1,x2,y2,"pion");
	la133->SetBorderSize(0);
        la133->SetTextAlign(32);
        la133->SetTextSize(0.035);
	la133->AddEntry(H133,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	la133->Draw();
	//S->Print(out_file_, "pdf");
        TPad *p3 = (TPad*)(S->cd(3));
	p3->SetLogy();
	H134->Draw();
	TLegend *la134=new TLegend(0.65,yy1,x2,y2,"electron");
	la134->SetBorderSize(0);
        la134->SetTextAlign(32);
        la134->SetTextSize(0.035);
	la134->AddEntry(H134,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	la134->Draw();
	//S->Print(out_file_, "pdf");
        TPad *p4 = (TPad*)(S->cd(4));
	p4->SetLogy();
	H135->Draw();
	TLegend *la135=new TLegend(0.65,yy1,x2,y2,"muon's");
	la135->SetBorderSize(0);
        la135->SetTextAlign(32);
        la135->SetTextSize(0.035);
	la135->AddEntry(H135,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	la135->Draw();
	S->Print(out_file_, "pdf");
	//! page45
	S->cd(1);
	H136->Draw();
	TLegend *l136=new TLegend(0.65,yy1,x2,y2,"all");
	l136->SetBorderSize(0);
        l136->SetTextAlign(32);
        l136->SetTextSize(0.035);
	l136->AddEntry(H136,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	l136->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H137->Draw();
	TLegend *l137=new TLegend(0.65,yy1,x2,y2,"pion");
	l137->SetBorderSize(0);
        l137->SetTextAlign(32);
        l137->SetTextSize(0.035);
	l137->AddEntry(H137,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l137->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H138->Draw();
	TLegend *l138=new TLegend(0.65,yy1,x2,y2,"electron");
	l138->SetBorderSize(0);
        l138->SetTextAlign(32);
        l138->SetTextSize(0.035);
	l138->AddEntry(H138,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l138->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H139->Draw();
	TLegend *l139=new TLegend(0.65,yy1,x2,y2,"muon's");
	l139->SetBorderSize(0);
        l139->SetTextAlign(32);
        l139->SetTextSize(0.035);
	l139->AddEntry(H139,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	l139->Draw();
	S->Print(out_file_, "pdf");
	//! page46
	p1->SetLogy(0);
	p2->SetLogy(0);
	p3->SetLogy(0);
	p4->SetLogy(0);
	S->cd(1);
	H140->Draw();
	TLegend *l140=new TLegend(0.65,yy1,x2,y2,"all");
	l140->SetBorderSize(0);
        l140->SetTextAlign(32);
        l140->SetTextSize(0.035);
	l140->AddEntry(H140,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	l140->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H141->Draw();
	TLegend *l141=new TLegend(0.65,yy1,x2,y2,"pion");
	l141->SetBorderSize(0);
        l141->SetTextAlign(32);
        l141->SetTextSize(0.035);
	l141->AddEntry(H141,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l141->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H142->Draw();
	TLegend *l142=new TLegend(0.65,yy1,x2,y2,"electron");
	l142->SetBorderSize(0);
        l142->SetTextAlign(32);
        l142->SetTextSize(0.035);
	l142->AddEntry(H142,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l142->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H143->Draw();
	TLegend *l143=new TLegend(0.65,yy1,x2,y2,"muon's");
	l143->SetBorderSize(0);
        l143->SetTextAlign(32);
        l143->SetTextSize(0.035);
	l143->AddEntry(H143,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	l143->Draw();
	S->Print(out_file_, "pdf");
	//! page47
	S->cd(1);
	H144->Draw();
	TLegend *l144=new TLegend(0.65,yy1,x2,y2,"all");
	l144->SetBorderSize(0);
        l144->SetTextAlign(32);
        l144->SetTextSize(0.035);
	l144->AddEntry(H144,"#splitline{minpt, maxeta, z0,}{  phibarrel, zbarrel}");
	l144->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(2);
	H145->Draw();
	TLegend *l145=new TLegend(0.65,yy1,x2,y2,"pion");
	l145->SetBorderSize(0);
        l145->SetTextAlign(32);
        l145->SetTextSize(0.035);
	l145->AddEntry(H145,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l145->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(3);
	H146->Draw();
	TLegend *l146=new TLegend(0.65,yy1,x2,y2,"electron");
	l146->SetBorderSize(0);
        l146->SetTextAlign(32);
        l146->SetTextSize(0.035);
	l146->AddEntry(H146,"#splitline{minpt, maxeta, z0,}{ phibarrel, zbarrel}");
	l146->Draw();
	//S->Print(out_file_, "pdf");
        S->cd(4);
	H147->Draw();
	TLegend *l147=new TLegend(0.65,yy1,x2,y2,"muon's");
	l147->SetBorderSize(0);
        l147->SetTextAlign(32);
        l147->SetTextSize(0.035);
	l147->AddEntry(H147,"#splitline{minpt, maxeta, z0, }{ phibarrel, zbarrel}");
	l147->Draw();
	S->Print(out_file_, "pdf");
	//! page48

	S->Clear();
	H_pur_vs_eta->Draw();
	S->Print(out_file_, "pdf");
	//! page49
	H_pur_vs_eta_l->Draw();
	S->Print(out_file_, "pdf");
	//! page50
	H_pur_vs_eta_m->Draw();
	S->Print(out_file_, "pdf");
	//! page51
	H_pur_vs_eta_t->Draw();
	S->Print(out_file_, "pdf");
	//! page52
	H_pur_vs_pt->Draw();
	S->Print(out_file_, "pdf");
	//! page53
	H_pur_vs_pt_l->Draw();
	S->Print(out_file_, "pdf");
	//! page54
	H_pur_vs_pt_m->Draw();
	S->Print(out_file_, "pdf");
	//! page55
	H_pur_vs_pt_t->Draw();
	S->Print(out_file_, "pdf");
	 
	//! page56
 	H1->Draw();
 	H2->Draw("same");
 	TLegend *leg1=new TLegend(x1,y1,x2,y2,"truth P_{t}");
 	//leg1->SetFillStyle(10); 
 	leg1->SetBorderSize(0);
 	leg1->SetTextAlign(32);
 	leg1->SetTextSize(0.035);
 	leg1->AddEntry(H1,"very loose cuts","lp");
	leg1->AddEntry(H2,"+ phi barrel cut = 0.007","lp");
	leg1->Draw();
	S->Print(out_file_open, "pdf");
	//! page57
	H1->Draw();
	H4->Draw("same");
	TLegend *leg2=new TLegend(x1,0.7,x2,y2,"");
	//leg2->SetFillStyle(10); 
        leg2->SetBorderSize(0);
	leg2->SetTextAlign(32);
	leg2->SetTextSize(0.035);
        leg2->AddEntry(H1,"truth P_{t}","lp");
        leg2->AddEntry(H4,"matched P_{t}","lp");
        leg2->Draw();
	S->Print(out_file_, "pdf");
	//! page58
	H4->Draw();
        H6->Draw("same");
	TLegend *leg3=new TLegend(x1,y1,x2,y2,"rec P_{t}");
	//leg3->SetFillStyle(10); 
        leg3->SetBorderSize(0);
	leg3->SetTextAlign(32);
	leg3->SetTextSize(0.035);
        leg3->AddEntry(H4,"matched tracks","lp");
        leg3->AddEntry(H6,"fake tracks","lp");
        leg3->Draw();
        S->Print(out_file_, "pdf");
	//! page59
	H7->Draw();
        H8->Draw("same");
        H9->Draw("same");
        H10->Draw("same");
	TLegend *leg4=new TLegend(x1,y1,x2,y2,"");
	//leg4->SetFillStyle(10); 
        leg4->SetBorderSize(0);
	leg4->SetTextAlign(32);
	leg4->SetTextSize(0.035);
        leg4->AddEntry(H7,"all tracks","lp");
        leg4->AddEntry(H8,"pions","lp");
        leg4->AddEntry(H9,"electrons","lp");
        leg4->AddEntry(H10,"muons","lp");
        leg4->Draw();
        S->Print(out_file_, "pdf");
	//! page60
	H11->Draw();
	TLegend *leg5=new TLegend(x1,y1,x2,y2,"truth P_{t}");
	//leg5->SetFillStyle(10); 
        leg5->SetBorderSize(0);
	leg5->SetTextAlign(32);
	leg5->SetTextSize(0.035);
        leg5->AddEntry(H11,"#splitline{phi barrel cut = 0.007 +}{Z0_{max} = 150}","lp");
        leg5->Draw();
        S->Print(out_file_, "pdf");
	//! page61
	H12->Draw();
        H14->Draw("same");
        H13->Draw("same");
	TLegend *leg6=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg6->SetFillStyle(10); 
        leg6->SetBorderSize(0);
	leg6->SetTextAlign(32);
	leg6->SetTextSize(0.035);
        leg6->AddEntry(H12,"fake tracks","lp");
        leg6->AddEntry(H13,"matched tracks","lp");
        leg6->AddEntry(H14,"truth particles","lp");
        leg6->Draw();
        S->Print(out_file_, "pdf");
	//! page62
	H15->Draw();
        H17->Draw("same");
        H16->Draw("same");
	TLegend *leg7=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg7->SetFillStyle(10); 
        leg7->SetBorderSize(0);
	leg7->SetTextAlign(32);
	leg7->SetTextSize(0.035);
        leg7->AddEntry(H15,"fake tracks","lp");
        leg7->AddEntry(H16,"matched tracks","lp");
        leg7->AddEntry(H17,"truth particles","lp");
        leg7->Draw();
        S->Print(out_file_, "pdf");
	//! page63
	H18->Draw();
        H20->Draw("same");
        H19->Draw("same");
	TLegend *leg8=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg8->SetFillStyle(10); 
        leg8->SetBorderSize(0);
	leg8->SetTextAlign(32);
	leg8->SetTextSize(0.035);
        leg8->AddEntry(H18,"fake tracks","lp");
        leg8->AddEntry(H19,"matched tracks","lp");
        leg8->AddEntry(H20,"truth particles","lp");
        leg8->Draw();
        S->Print(out_file_, "pdf");
	//! page64
	H21->Draw();
        H23->Draw("same");
        H22->Draw("same");
	TLegend *leg9=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg9->SetFillStyle(10); 
        leg9->SetBorderSize(0);
	leg9->SetTextAlign(32);
	leg9->SetTextSize(0.035);
        leg9->AddEntry(H21,"fake tracks","lp");
        leg9->AddEntry(H22,"matched tracks","lp");
        leg9->AddEntry(H23,"truth particles","lp");
        leg9->Draw();
        S->Print(out_file_, "pdf");
	//! page65
	H24->Draw();
        H26->Draw("same");
        H25->Draw("same");
	H25a->Draw("same");
	/*dphi2_l->Draw("same");
	dphi2_m->Draw("same");
	dphi2_t->Draw("same");
	*/TLegend *leg10=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg10->SetFillStyle(10);
        leg10->SetBorderSize(0);
	leg10->SetTextAlign(32);
	leg10->SetTextSize(0.035);
        leg10->AddEntry(H24,"fake tracks","lp");
        leg10->AddEntry(H25,"matched tracks","lp");
	leg10->AddEntry(H25a,"no electrons","lp");
        leg10->AddEntry(H26,"truth particles","lp");
        leg10->Draw();
        S->Print(out_file_, "pdf");
	//! page66
	H27->Draw();
        H29->Draw("same");
        H28->Draw("same");
	H28a->Draw("same");
	/*dz2_l->Draw("same");
	dz2_m->Draw("same");
	dz2_t->Draw("same");
	*/TLegend *leg11=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg11->SetFillStyle(10); 
        leg11->SetBorderSize(0);
	leg11->SetTextAlign(32);
	leg11->SetTextSize(0.035);
        leg11->AddEntry(H27,"fake tracks","lp");
        leg11->AddEntry(H28,"matched tracks","lp");
	leg11->AddEntry(H28a,"no electrons","lp");
        leg11->AddEntry(H29,"truth particles","lp");
        leg11->Draw();
        S->Print(out_file_, "pdf");
	//! page67
	H30->Draw();
        H32->Draw("same");
        H31->Draw("same");
	TLegend *leg12=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg12->SetFillStyle(10); 
        leg12->SetBorderSize(0);
	leg12->SetTextAlign(32);
	leg12->SetTextSize(0.035);
        leg12->AddEntry(H30,"fake tracks","lp");
        leg12->AddEntry(H31,"matched tracks","lp");
        leg12->AddEntry(H32,"truth particles","lp");
        leg12->Draw();
        S->Print(out_file_, "pdf");
	//! page68
	H33->Draw();
        H35->Draw("same");
        H34->Draw("same");
	TLegend *leg13=new TLegend(x1,y1,x2,y2,"#splitline{phi Barrel = 0.007 +}{Zbarrel = 70 + Z0_{max} = 150}");
	//leg13->SetFillStyle(10); 
        leg13->SetBorderSize(0);
	leg13->SetTextAlign(32);
	leg13->SetTextSize(0.035);
        leg13->AddEntry(H33,"fake tracks","lp");
        leg13->AddEntry(H34,"matched tracks","lp");
        leg13->AddEntry(H35,"truth particles","lp");
        leg13->Draw();
        S->Print(out_file_, "pdf");
	//! page69
	/*H36->Draw();
        H37->Draw("same");
        H38->Draw("same");
        H39->Draw("same");
        H40->Draw("same");
        H41->Draw("same");
	k_l->Draw("same");
	k_m->Draw("same");
	k_t->Draw("same");
        TLegend *leg14=new TLegend(x1,0.1,x2,0.4,"");
        //leg4->SetFillStyle(10); 
        leg14->SetBorderSize(0);
        leg14->SetTextAlign(32);
        leg14->SetTextSize(0.035);
        leg14->AddEntry(H36,"all tracks","lp");
        leg14->AddEntry(H37,"pions","lp");
        leg14->AddEntry(H38,"electrons","lp");
        leg14->AddEntry(H39,"no electrons","lp");
        leg14->AddEntry(H40,"muons","lp");
        leg14->AddEntry(H41,"all truth","lp");
        leg14->Draw();
        S->Print(out_file_, "pdf");	*/
	H_pur_vs_eta->Draw();
	H_pur_vs_eta_l->Draw("same");
	H_pur_vs_eta_m->Draw("same");
	H_pur_vs_eta_t->Draw("same");
	TLegend *leg15=new TLegend(x1,0.1,x2,0.33,"");
	leg15->SetBorderSize(0);
        leg15->SetTextAlign(32);
        leg15->SetTextSize(0.035);
        leg15->AddEntry(H_pur_vs_eta,"wide cuts","lp");
        leg15->AddEntry(H_pur_vs_eta_l,"loose cuts","lp");
        leg15->AddEntry(H_pur_vs_eta_m,"medium cuts","lp");
        leg15->AddEntry(H_pur_vs_eta_t,"tight cuts","lp");
        leg15->Draw();
        S->Print(out_file_, "pdf");
	//! page70
	H_pur_vs_eta_l->GetYaxis()->SetRangeUser(0.98,1.05);
	H_pur_vs_eta_l->Draw();
	H_pur_vs_eta_m->Draw("same");
	H_pur_vs_eta_t->Draw("same");
	TLegend *leg16=new TLegend(x1,0.75,x2,y2,"");
	leg16->SetBorderSize(0);
        leg16->SetTextAlign(32);
        leg16->SetTextSize(0.035);
        leg16->AddEntry(H_pur_vs_eta_l,"loose cuts","lp");
        leg16->AddEntry(H_pur_vs_eta_m,"medium cuts","lp");
        leg16->AddEntry(H_pur_vs_eta_t,"tight cuts","lp");
        leg16->Draw();
        S->Print(out_file_, "pdf");
	//! page71
	H_pur_vs_pt->Draw();
	H_pur_vs_pt_l->Draw("same");
	H_pur_vs_pt_m->Draw("same");
	H_pur_vs_pt_t->Draw("same");
	TLegend *leg17=new TLegend(x1,0.1,x2,0.33,"");
        leg17->SetBorderSize(0);
        leg17->SetTextAlign(32);
        leg17->SetTextSize(0.035);
        leg17->AddEntry(H_pur_vs_pt,"wide cuts","lp");
        leg17->AddEntry(H_pur_vs_pt_l,"loose cuts","lp");
        leg17->AddEntry(H_pur_vs_pt_m,"medium cuts","lp");
        leg17->AddEntry(H_pur_vs_pt_t,"tight cuts","lp");
        leg17->Draw();
	S->SetLogx();
	S->Print(out_file_, "pdf");
	//! page72
	H_pur_vs_pt_l->GetYaxis()->SetRangeUser(0.8,1.05);
	H_pur_vs_pt_l->Draw();
	H_pur_vs_pt_m->Draw("same");
	H_pur_vs_pt_t->Draw("same");
	TLegend *leg18=new TLegend(x1,0.75,x2,y2,"");
        leg18->SetBorderSize(0);
        leg18->SetTextAlign(32);
        leg18->SetTextSize(0.035);
        leg18->AddEntry(H_pur_vs_pt_l,"loose cuts","lp");
        leg18->AddEntry(H_pur_vs_pt_m,"medium cuts","lp");
        leg18->AddEntry(H_pur_vs_pt_t,"tight cuts","lp");
        leg18->Draw();
	S->Print(out_file_close, "pdf");	
	
	std::cout<<"Done! \n";
	return 0;
}
int writeAll()
{
write_to_pdf("control_minBiasA_f.root","control_minBiasA_f");
write_to_pdf("control_minBiasB_f.root","control_minBiasB_f");
write_to_pdf("control_minBiasC_f.root","control_minBiasC_f");
return 0;
}

